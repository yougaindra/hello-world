#include <bits/stdc++.h>
using namespace std;
 
vector<int> tin;
vector<int> fup;
set<pair<int,int> > edg;
vector<int> vis;
vector<vector<int>> g;
//vector<int> sz;
int tim;
void dfs(int node,int par)
{
	tin[node] = fup[node] = tim++;
	for(auto nxt : g[node])
	{
		if(nxt == par) continue;
		if(tin[nxt] != -1)
		{
			fup[node] = min(fup[node],tin[nxt]);
		}
		else
		{
			dfs(nxt,node);
			fup[node] = min(fup[node],fup[nxt]);
			if(fup[nxt] > tin[node])
			{
				edg.erase({nxt,node});
				edg.erase({node,nxt});
			}
		}
	}
}
 
long long dfs2(int node)
{
	vis[node] = 1;
	int temp  =1;
	//cout << "node :" << node << " " ;
	for(auto nxt : g[node])
	{
		if(vis[nxt] == 0)
			temp += dfs2(nxt);
	}
	return temp;
}
int main()
{
	tim = 0;
	int n,m;
	cin >> n >> m;
	g.resize(n+1);
	tin.resize(n+2,-1);
	fup.resize(n+2);
	vis.resize(n+2,0);
	//sz.resize(n+2,0);
	for(int i = 0;i < m;i++)
	{
		int u,v;
		cin >> u >> v;
		u--;v--;
		g[u].push_back(v);
		g[v].push_back(u);
		edg.insert({u,v});
	}
	dfs(0,-1);
	//for(auto &x : vis) x = 0;
	g.clear(); g.resize(n+2);
	for(auto x : edg)
	{
		g[x.first].push_back(x.second);
		g[x.second].push_back(x.first);
	}
 
	// for(auto ed : edg)
	// 	cout << ed.first << " " << ed.second << endl;
	// for(int i = 0;i < n;i++)
	// {
	// 	cout << i << ": ";
	// 	for(auto to : g[i])
	// 		cout << to << " ";
	// 	cout << endl;
	// }
	long long sz = 0;
	double ans = 0;
	//dfs2(2);
	for(int i = 0;i < n;i++)
	{
		if(vis[i] == 0)
		{
			sz = dfs2(i);
			sz = sz*(n - sz);
			ans += sz;
			//cout << sz << " " << i <<  endl;
			sz = 0;
			
		}
	}
 
	cout << (double)ans/(double)((n*1ll*(n-1))) << endl;
 
} 
